<div class="jsonEditor">
    <div class="jsonEditor_sizeContainer">
        @baseJson
        <textarea spellcheck="false" @oninput=@HandleEdit class="jsonEditor_editor">@baseJson</textarea>
    </div>
    <CascadingValue IsFixed Value=@this>
        <JSONOverlay />
    </CascadingValue>
</div>

@code
{
    [Parameter]
    public string JSON { get; set; }

    public event Action OnUpdate;

    private string baseJson;
    private string currentJson;

    private void HandleEdit(ChangeEventArgs e)
    {
        currentJson = (string)e.Value;
        OnUpdate?.Invoke();
    }

    protected override void OnParametersSet()
    {
        baseJson = JSON
            .Replace("\t", "    ")
            .Replace("\\n", "\n");
        currentJson = baseJson;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            OnUpdate?.Invoke();
        }
    }

    private string GetFormatted(string json)
    {
        try
        {
            var root = Newtonsoft.Json.Linq.JObject.Parse(json);
            var stringConverter = new StringConverter();
            //var commentConverter = new CommentConverter();
            //var settings = new Newtonsoft.Json.JsonSerializerSettings();
            //settings.Converters = new List<Newtonsoft.Json.JsonConverter> { stringConverter };
            //settings.Formatting = Newtonsoft.Json.Formatting.Indented;

            //return Newtonsoft.Json.JsonConvert.SerializeObject(root, settings);
            return root.ToString(Newtonsoft.Json.Formatting.Indented, stringConverter);
        }
        catch (Exception)
        {
            return null;
        }
    }

    public void TryPrettify()
    {
        var newJson = GetFormatted(currentJson);
        if (newJson != null)
        {
            baseJson = newJson;
            currentJson = newJson;
            StateHasChanged();
            OnUpdate?.Invoke();
        }
    }

    public string GetJSON(bool prettify)
    {
        return prettify ? GetFormatted(currentJson) : currentJson;
    }
}